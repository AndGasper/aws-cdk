"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const jsiiReflect = require("jsii-reflect");
const path = require("path");
const ts = new jsiiReflect.TypeSystem();
async function main() {
    // load all .jsii files into the type system
    for (const file of fs.readdirSync('./jsii')) {
        await ts.load(path.join('./jsii', file));
    }
    // ready to explore!
    const constructType = ts.findClass('@aws-cdk/cdk.Construct');
    const constructs = ts.classes.filter(c => extendsType(c, constructType));
    const services = {};
    constructs
        .filter(c => c.fqn.startsWith('@aws-cdk/aws-'))
        .forEach(c => {
        const [, serviceName] = c.assembly.name.split('/');
        if (!services[serviceName]) {
            const readmeName = `${serviceName}-readme`;
            services[serviceName] = [readmeName];
            if (c.assembly.readme) {
                fs.writeFileSync(`../docs/${readmeName}.md`, `---
hide_title: true
sidebar_label: Overview
id: ${readmeName}
---
${c.assembly.readme.markdown}`);
            }
            else {
                fs.writeFileSync(`../docs/${readmeName}.md`, 'OOPS');
            }
        }
        services[serviceName].push(c.name);
    });
    fs.writeFileSync(`../website/sidebars.json`, JSON.stringify({
        docs: services
    }, null, 2));
}
function extendsType(derived, base) {
    if (derived === base) {
        return true;
    }
    if (derived instanceof jsiiReflect.InterfaceType && base instanceof jsiiReflect.InterfaceType) {
        return derived.interfaces.some(x => x === base);
    }
    if (derived instanceof jsiiReflect.ClassType && base instanceof jsiiReflect.ClassType) {
        return derived.getAncestors().some(x => x === base);
    }
    return false;
}
exports.extendsType = extendsType;
main().catch(e => {
    console.error(e);
    process.exit(1);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHlCQUEwQjtBQUMxQiw0Q0FBNkM7QUFDN0MsNkJBQThCO0FBRTlCLE1BQU0sRUFBRSxHQUFHLElBQUksV0FBVyxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBVXhDLEtBQUssVUFBVSxJQUFJO0lBQ2pCLDRDQUE0QztJQUM1QyxLQUFLLE1BQU0sSUFBSSxJQUFJLEVBQUUsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7S0FDMUM7SUFFRCxvQkFBb0I7SUFFcEIsTUFBTSxhQUFhLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0lBQzdELE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBRXpFLE1BQU0sUUFBUSxHQUFpQyxFQUFFLENBQUM7SUFDbEQsVUFBVTtTQUNQLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQzlDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNYLE1BQU0sQ0FBQyxFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQzFCLE1BQU0sVUFBVSxHQUFHLEdBQUcsV0FBVyxTQUFTLENBQUM7WUFDM0MsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDckMsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRTtnQkFDckIsRUFBRSxDQUFDLGFBQWEsQ0FBQyxXQUFXLFVBQVUsS0FBSyxFQUFFOzs7TUFHakQsVUFBVTs7RUFFZCxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO2FBQ3ZCO2lCQUFNO2dCQUNMLEVBQUUsQ0FBQyxhQUFhLENBQUMsV0FBVyxVQUFVLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQzthQUN0RDtTQUNGO1FBQ0QsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQyxDQUFDLENBQUM7SUFFTCxFQUFFLENBQUMsYUFBYSxDQUFDLDBCQUEwQixFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDMUQsSUFBSSxFQUFFLFFBQVE7S0FDZixFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQWdCLFdBQVcsQ0FBQyxPQUF5QixFQUFFLElBQXNCO0lBQzNFLElBQUksT0FBTyxLQUFLLElBQUksRUFBRTtRQUNwQixPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsSUFBSSxPQUFPLFlBQVksV0FBVyxDQUFDLGFBQWEsSUFBSSxJQUFJLFlBQVksV0FBVyxDQUFDLGFBQWEsRUFBRTtRQUM3RixPQUFPLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO0tBQ2pEO0lBRUQsSUFBSSxPQUFPLFlBQVksV0FBVyxDQUFDLFNBQVMsSUFBSSxJQUFJLFlBQVksV0FBVyxDQUFDLFNBQVMsRUFBRTtRQUNyRixPQUFPLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUM7S0FDckQ7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFkRCxrQ0FjQztBQUVELElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakIsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XG5pbXBvcnQganNpaVJlZmxlY3QgPSByZXF1aXJlKCdqc2lpLXJlZmxlY3QnKTtcbmltcG9ydCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuXG5jb25zdCB0cyA9IG5ldyBqc2lpUmVmbGVjdC5UeXBlU3lzdGVtKCk7XG4vLyB0c2xpbnQ6ZGlzYWJsZTpuby1jb25zb2xlXG5cbnR5cGUgQ2F0ZWdvcnkgPSBzdHJpbmcgfCB7XG4gIGRvYz86IHN0cmluZztcbiAgdHlwZT86IHN0cmluZztcbiAgbGFiZWw6IHN0cmluZztcbiAgaWRzPzogc3RyaW5nW107XG59O1xuXG5hc3luYyBmdW5jdGlvbiBtYWluKCkge1xuICAvLyBsb2FkIGFsbCAuanNpaSBmaWxlcyBpbnRvIHRoZSB0eXBlIHN5c3RlbVxuICBmb3IgKGNvbnN0IGZpbGUgb2YgZnMucmVhZGRpclN5bmMoJy4vanNpaScpKSB7XG4gICAgYXdhaXQgdHMubG9hZChwYXRoLmpvaW4oJy4vanNpaScsIGZpbGUpKTtcbiAgfVxuXG4gIC8vIHJlYWR5IHRvIGV4cGxvcmUhXG5cbiAgY29uc3QgY29uc3RydWN0VHlwZSA9IHRzLmZpbmRDbGFzcygnQGF3cy1jZGsvY2RrLkNvbnN0cnVjdCcpO1xuICBjb25zdCBjb25zdHJ1Y3RzID0gdHMuY2xhc3Nlcy5maWx0ZXIoYyA9PiBleHRlbmRzVHlwZShjLCBjb25zdHJ1Y3RUeXBlKSk7XG5cbiAgY29uc3Qgc2VydmljZXM6IHsgW2tleTogc3RyaW5nXTogQ2F0ZWdvcnlbXX0gPSB7fTtcbiAgY29uc3RydWN0c1xuICAgIC5maWx0ZXIoYyA9PiBjLmZxbi5zdGFydHNXaXRoKCdAYXdzLWNkay9hd3MtJykpXG4gICAgLmZvckVhY2goYyA9PiB7XG4gICAgICBjb25zdCBbLCBzZXJ2aWNlTmFtZV0gPSBjLmFzc2VtYmx5Lm5hbWUuc3BsaXQoJy8nKTtcbiAgICAgIGlmICghc2VydmljZXNbc2VydmljZU5hbWVdKSB7XG4gICAgICAgIGNvbnN0IHJlYWRtZU5hbWUgPSBgJHtzZXJ2aWNlTmFtZX0tcmVhZG1lYDtcbiAgICAgICAgc2VydmljZXNbc2VydmljZU5hbWVdID0gW3JlYWRtZU5hbWVdO1xuICAgICAgICBpZiAoYy5hc3NlbWJseS5yZWFkbWUpIHtcbiAgICAgICAgICBmcy53cml0ZUZpbGVTeW5jKGAuLi9kb2NzLyR7cmVhZG1lTmFtZX0ubWRgLCBgLS0tXG5oaWRlX3RpdGxlOiB0cnVlXG5zaWRlYmFyX2xhYmVsOiBPdmVydmlld1xuaWQ6ICR7cmVhZG1lTmFtZX1cbi0tLVxuJHtjLmFzc2VtYmx5LnJlYWRtZS5tYXJrZG93bn1gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmcy53cml0ZUZpbGVTeW5jKGAuLi9kb2NzLyR7cmVhZG1lTmFtZX0ubWRgLCAnT09QUycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzZXJ2aWNlc1tzZXJ2aWNlTmFtZV0ucHVzaChjLm5hbWUpO1xuICAgIH0pO1xuXG4gIGZzLndyaXRlRmlsZVN5bmMoYC4uL3dlYnNpdGUvc2lkZWJhcnMuanNvbmAsIEpTT04uc3RyaW5naWZ5KHtcbiAgICBkb2NzOiBzZXJ2aWNlc1xuICB9LCBudWxsLCAyKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRzVHlwZShkZXJpdmVkOiBqc2lpUmVmbGVjdC5UeXBlLCBiYXNlOiBqc2lpUmVmbGVjdC5UeXBlKSB7XG4gIGlmIChkZXJpdmVkID09PSBiYXNlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoZGVyaXZlZCBpbnN0YW5jZW9mIGpzaWlSZWZsZWN0LkludGVyZmFjZVR5cGUgJiYgYmFzZSBpbnN0YW5jZW9mIGpzaWlSZWZsZWN0LkludGVyZmFjZVR5cGUpIHtcbiAgICByZXR1cm4gZGVyaXZlZC5pbnRlcmZhY2VzLnNvbWUoeCA9PiB4ID09PSBiYXNlKTtcbiAgfVxuXG4gIGlmIChkZXJpdmVkIGluc3RhbmNlb2YganNpaVJlZmxlY3QuQ2xhc3NUeXBlICYmIGJhc2UgaW5zdGFuY2VvZiBqc2lpUmVmbGVjdC5DbGFzc1R5cGUpIHtcbiAgICByZXR1cm4gZGVyaXZlZC5nZXRBbmNlc3RvcnMoKS5zb21lKHggPT4geCA9PT0gYmFzZSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1haW4oKS5jYXRjaChlID0+IHtcbiAgY29uc29sZS5lcnJvcihlKTtcbiAgcHJvY2Vzcy5leGl0KDEpO1xufSk7Il19